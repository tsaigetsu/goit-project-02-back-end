{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Task Pro",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "Task Pro is a web application for team task management. The app enables users to organize work, divide tasks into stages, collaborate, and track progress. With user registration, authentication, and different access levels, Task Pro ensures data security and provides access only to relevant information."
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Local server"
    },
    {
      "url": "https://goit-project-02-front-end.onrender.com",
      "description": "Frontend application"
    },
    {
      "url": "https://goit-project-02-back-end.onrender.com",
      "description": "Backend API"
    }
  ],
  "paths": {
    "/boards": {
      "get": {
        "tags": ["Boards"],
        "summary": "Get list of boards",
        "operationId": "getBoards",
        "description": "Get list of boards with this endpoint",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found boards!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["status", "message", "data"],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found boards!"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "_id",
                          "title",
                          "backgroundId",
                          "iconId",
                          "userId",
                          "createdAt",
                          "updatedAt"
                        ],
                        "properties": {
                          "_id": {
                            "description": "Board's id",
                            "type": "string",
                            "example": "65e4decdd286b30065d54af9"
                          },
                          "title": {
                            "description": "Board's title",
                            "type": "string",
                            "example": "Name of board"
                          },
                          "iconId": {
                            "description": "Board's icon id",
                            "type": "string",
                            "enum": [
                              "ic1",
                              "ic2",
                              "ic3",
                              "ic4",
                              "ic5",
                              "ic6",
                              "ic7",
                              "ic8"
                            ]
                          },
                          "backgroundId": {
                            "description": "Board's background id",
                            "type": "string",
                            "enum": [
                              "nobg",
                              "bg1",
                              "bg2",
                              "bg3",
                              "bg4",
                              "bg5",
                              "bg6",
                              "bg7",
                              "bg8",
                              "bg9",
                              "bg10",
                              "bg11",
                              "bg12",
                              "bg13",
                              "bg14",
                              "bg15"
                            ]
                          },
                          "userId": {
                            "description": "Board's owner id",
                            "type": "string",
                            "example": "67253fb87c2bb8a903b38e0b"
                          },
                          "createdAt": {
                            "description": "Board creation time",
                            "type": "string",
                            "example": "2024-10-21T19:24:54.504Z"
                          },
                          "updatedAt": {
                            "description": "Time the board was last updated",
                            "type": "string",
                            "example": "2024-10-21T19:24:54.504Z"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": ["Boards"],
        "summary": "Create board",
        "operationId": "createBoard",
        "description": "Create a board with payload",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/postReqBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Board successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["status", "message", "data"],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully created a board!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/responseBody-3"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/boards/{id}": {
      "get": {
        "tags": ["Boards"],
        "summary": "Get list of boards",
        "operationId": "getBoard",
        "description": "Get list of boards with this endpoint",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598384"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found board!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["status", "message", "data"],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found boards!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/responseBody-3"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "patch": {
        "tags": ["Boards"],
        "summary": "Update board",
        "operationId": "updateBoard",
        "description": "Update a board with payload",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598384"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/patchReqBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Board successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["status", "message", "data"],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully updated a board!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/responseBody-3"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "delete": {
        "tags": ["Boards"],
        "summary": "Delete board",
        "operationId": "deleteBoard",
        "description": "Delete a board with payload",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598384"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The board was deleted successfully."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/columns": {
      "post": {
        "tags": ["Columns"],
        "summary": "Create column",
        "operationId": "createColumn",
        "description": "Create a column with payload",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/postReqBody-2"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Column successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["status", "message", "data"],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully created a column!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/responseBody-2"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/columns/{id}": {
      "patch": {
        "tags": ["Columns"],
        "summary": "Update column",
        "operationId": "updateColumn",
        "description": "Update a column with payload",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598384"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/patchReqBody-2"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Column successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["status", "message", "data"],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully updated a column!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/responseBody-2"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "delete": {
        "tags": ["Columns"],
        "summary": "Delete column",
        "operationId": "deleteColumn",
        "description": "Delete a column with payload",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598384"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The column was deleted successfully."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/tasks": {
      "post": {
        "tags": ["Tasks"],
        "summary": "Create task",
        "operationId": "createTask",
        "description": "Create a task with payload",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/postReqBody-3"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Task successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["status", "message", "data"],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully created a task!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/responseBody"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/tasks/{id}": {
      "patch": {
        "tags": ["Tasks"],
        "summary": "Update task",
        "operationId": "updateTask",
        "description": "Update a task with payload",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598384"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/patchReqBody-3"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Task successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["status", "message", "data"],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully updated a task!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/responseBody"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "delete": {
        "tags": ["Tasks"],
        "summary": "Delete task",
        "operationId": "deleteTask",
        "description": "Delete a task with payload",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598384"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The task was deleted successfully."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "Register a new user",
        "operationId": "registerUser",
        "security": [],
        "description": "Register a new user by providing name, email, and password.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name", "email", "password"],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "John Doe"
                  },
                  "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "Password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully registered user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["status", "message", "data"],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully registered user"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "your_access_token_here"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict (Email is already in use)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 409
                    },
                    "message": {
                      "type": "string",
                      "example": "Email is already in use"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "Login user",
        "operationId": "loginUser",
        "security": [],
        "description": "Authenticate a user with email and password.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email", "password"],
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "SecurePassword123!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully logged in user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["status", "message", "data"],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in user!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "your_access_token_here"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Email not found or incorrect password)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Email not found or unauthorized"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": ["Auth"],
        "summary": "Logout user",
        "operationId": "logoutUser",
        "description": "Logout the current user and clear session cookies.",
        "responses": {
          "204": {
            "description": "Successfully logged out"
          },
          "401": {
            "description": "Unauthorized (No active session)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "No active session"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/get-oauth-url": {
      "get": {
        "tags": ["Auth with Google"],
        "summary": "Get Google OAuth URL",
        "description": "Get the URL where users can log in via Google OAuth.\nOnce the user is authenticated with Google, they will be redirected to your application.\n",
        "security": [],
        "responses": {
          "200": {
            "description": "Successfully fetched Google OAuth URL.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully get Google OAuth url!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string",
                          "example": "https://accounts.google.com/o/oauth2/auth?client_id=..."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "operationId": "getGoogleOAuthUrl"
      }
    },
    "/auth/confirm-google-auth": {
      "post": {
        "tags": ["Auth with Google"],
        "summary": "Confirm Google OAuth",
        "description": "Confirm Google OAuth by sending the authorization code obtained after user authentication.\nReturns an access token if the authentication is successful.\n",
        "security": [],
        "requestBody": {
          "description": "Google OAuth code",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "The authorization code received from Google after user logs in.",
                    "example": "4/P7q7W91a-oMsCeLvIaQm6bTrgtp7"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully logged in via Google OAuth.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in via Google OAuth!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "description": "The access token for the authenticated session.",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid or missing code."
          },
          "401": {
            "description": "Unauthorized - Invalid Google account or code."
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "operationId": "confirmGoogleAuth"
      }
    },
    "/user/profile": {
      "get": {
        "tags": ["User"],
        "summary": "Get user profile",
        "description": "Retrieve the profile information of the authenticated user.",
        "operationId": "getUserProfile",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user profile",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Profile retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "_id": {
                          "type": "string",
                          "example": "5f50c31f2c8c8a5d3f4b4b5c"
                        },
                        "name": {
                          "type": "string",
                          "example": "John Doe"
                        },
                        "email": {
                          "type": "string",
                          "example": "johndoe@example.com"
                        },
                        "photo": {
                          "type": "string",
                          "example": "https://cloudinary.com/johndoe_profile.jpg"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2023-01-01T00:00:00.000Z"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2023-01-02T00:00:00.000Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized - No valid token provided"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update user profile",
        "operationId": "updateProfile",
        "description": "This endpoint allows an authenticated user to update their profile information.",
        "tags": ["User"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "New name for the user"
                  },
                  "email": {
                    "type": "string",
                    "description": "New email for the user",
                    "format": "email"
                  },
                  "password": {
                    "type": "string",
                    "description": "New password for the user",
                    "format": "password"
                  },
                  "photo": {
                    "type": "string",
                    "format": "binary",
                    "description": "Profile photo to upload"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Profile updated successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "_id": {
                          "type": "string",
                          "example": "5f8d0d55b54764421b7169a2"
                        },
                        "name": {
                          "type": "string",
                          "example": "John Doe"
                        },
                        "email": {
                          "type": "string",
                          "example": "john.doe@example.com"
                        },
                        "photo": {
                          "type": "string",
                          "example": "https://res.cloudinary.com/.../user-photo.jpg"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-11-02T18:42:50.038Z"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-11-02T19:09:22.944Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Conflict - Email already in use"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "responses": {
      "401": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": ["status", "message", "data"],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "required": ["message"],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Access token expired"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "NotFound error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": ["status", "message", "data"],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "Not found"
                },
                "data": {
                  "type": "object",
                  "required": ["message"],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Object not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "schemas": {
      "postReqBody": {
        "type": "object",
        "required": ["title", "iconId"],
        "properties": {
          "title": {
            "description": "Board's title",
            "type": "string",
            "example": "Name of board"
          },
          "iconId": {
            "description": "Board's icon id",
            "type": "string",
            "enum": ["ic1", "ic2", "ic3", "ic4", "ic5", "ic6", "ic7", "ic8"]
          },
          "backgroundId": {
            "description": "Board's background id",
            "type": "string",
            "enum": [
              "nobg",
              "bg1",
              "bg2",
              "bg3",
              "bg4",
              "bg5",
              "bg6",
              "bg7",
              "bg8",
              "bg9",
              "bg10",
              "bg11",
              "bg12",
              "bg13",
              "bg14",
              "bg15"
            ]
          }
        }
      },
      "responseBody": {
        "type": "object",
        "required": [
          "_id",
          "title",
          "description",
          "deadline",
          "priority",
          "userId",
          "columnId",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "_id": {
            "description": "Task's id",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "title": {
            "description": "Task's title",
            "type": "string",
            "example": "Do something today"
          },
          "description": {
            "description": "Task's description",
            "type": "string",
            "example": "More about what to do"
          },
          "deadline": {
            "description": "Task's deadline in your format",
            "type": "string",
            "example": "2024-10-21T19:24:54.504Z"
          },
          "priority": {
            "description": "Task's priority",
            "type": "string",
            "enum": ["without priority", "low", "medium", "high"]
          },
          "userId": {
            "description": "Task's owner id",
            "type": "string",
            "example": "67253fb87c2bb8a903b38e0b"
          },
          "columnId": {
            "description": "Task's column id",
            "type": "string",
            "example": "67253fb87c2bb8a903b38e0b"
          },
          "createdAt": {
            "description": "Task creation time",
            "type": "string",
            "example": "2024-10-21T19:24:54.504Z"
          },
          "updatedAt": {
            "description": "Time the task was last updated",
            "type": "string",
            "example": "2024-10-21T19:24:54.504Z"
          }
        }
      },
      "responseBody-2": {
        "type": "object",
        "required": [
          "_id",
          "title",
          "userId",
          "boardId",
          "createdAt",
          "updatedAt",
          "tasks"
        ],
        "properties": {
          "_id": {
            "description": "Column's id",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "title": {
            "description": "Column's title",
            "type": "string",
            "example": "To DO"
          },
          "userId": {
            "description": "Column's owner id",
            "type": "string",
            "example": "67253fb87c2bb8a903b38e0b"
          },
          "boardId": {
            "description": "Column's board id",
            "type": "string",
            "example": "67253fb87c2bb8a903b38e0b"
          },
          "createdAt": {
            "description": "Column creation time",
            "type": "string",
            "example": "2024-10-21T19:24:54.504Z"
          },
          "updatedAt": {
            "description": "Time the column was last updated",
            "type": "string",
            "example": "2024-10-21T19:24:54.504Z"
          },
          "tasks": {
            "description": "Array of column's tasks",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/responseBody"
            }
          }
        }
      },
      "responseBody-3": {
        "type": "object",
        "required": [
          "_id",
          "title",
          "backgroundId",
          "iconId",
          "userId",
          "createdAt",
          "updatedAt",
          "columns"
        ],
        "properties": {
          "_id": {
            "description": "Board's id",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "title": {
            "description": "Board's title",
            "type": "string",
            "example": "Name of board"
          },
          "iconId": {
            "description": "Board's icon id",
            "type": "string",
            "enum": ["ic1", "ic2", "ic3", "ic4", "ic5", "ic6", "ic7", "ic8"]
          },
          "backgroundId": {
            "description": "Board's background id",
            "type": "string",
            "enum": [
              "nobg",
              "bg1",
              "bg2",
              "bg3",
              "bg4",
              "bg5",
              "bg6",
              "bg7",
              "bg8",
              "bg9",
              "bg10",
              "bg11",
              "bg12",
              "bg13",
              "bg14",
              "bg15"
            ]
          },
          "userId": {
            "description": "Board's owner id",
            "type": "string",
            "example": "67253fb87c2bb8a903b38e0b"
          },
          "createdAt": {
            "description": "Board creation time",
            "type": "string",
            "example": "2024-10-21T19:24:54.504Z"
          },
          "updatedAt": {
            "description": "Time the board was last updated",
            "type": "string",
            "example": "2024-10-21T19:24:54.504Z"
          },
          "columns": {
            "type": "array",
            "description": "Array of board's columns",
            "items": {
              "$ref": "#/components/schemas/responseBody-2"
            }
          }
        }
      },
      "patchReqBody": {
        "type": "object",
        "properties": {
          "title": {
            "description": "Board's title",
            "type": "string",
            "example": "Name of board"
          },
          "iconId": {
            "description": "Board's icon id",
            "type": "string",
            "enum": ["ic1", "ic2", "ic3", "ic4", "ic5", "ic6", "ic7", "ic8"]
          },
          "backgroundId": {
            "description": "Board's background id",
            "type": "string",
            "enum": [
              "nobg",
              "bg1",
              "bg2",
              "bg3",
              "bg4",
              "bg5",
              "bg6",
              "bg7",
              "bg8",
              "bg9",
              "bg10",
              "bg11",
              "bg12",
              "bg13",
              "bg14",
              "bg15"
            ]
          }
        }
      },
      "postReqBody-2": {
        "type": "object",
        "required": ["title", "boardId"],
        "properties": {
          "title": {
            "description": "Column's title",
            "type": "string",
            "example": "To DO"
          },
          "boardId": {
            "description": "Column's board id",
            "type": "string",
            "example": "67253fb87c2bb8a903b38e0b"
          }
        }
      },
      "patchReqBody-2": {
        "type": "object",
        "properties": {
          "title": {
            "description": "Column's title",
            "type": "string",
            "example": "To DO"
          },
          "boardId": {
            "description": "Column's board id",
            "type": "string",
            "example": "67253fb87c2bb8a903b38e0b"
          }
        }
      },
      "postReqBody-3": {
        "type": "object",
        "required": [
          "title",
          "description",
          "deadline",
          "priority",
          "columnId"
        ],
        "properties": {
          "title": {
            "description": "Task's title",
            "type": "string",
            "example": "Do something today"
          },
          "description": {
            "description": "Task's description",
            "type": "string",
            "example": "More about what to do"
          },
          "deadline": {
            "description": "Task's deadline in your format",
            "type": "string",
            "example": "2024-10-21T19:24:54.504Z"
          },
          "priority": {
            "description": "Task's priority",
            "type": "string",
            "enum": ["without priority", "low", "medium", "high"]
          },
          "columnId": {
            "description": "Task's column id",
            "type": "string",
            "example": "67253fb87c2bb8a903b38e0b"
          }
        }
      },
      "patchReqBody-3": {
        "type": "object",
        "properties": {
          "title": {
            "description": "Task's title",
            "type": "string",
            "example": "Do something today"
          },
          "description": {
            "description": "Task's description",
            "type": "string",
            "example": "More about what to do"
          },
          "deadline": {
            "description": "Task's deadline in your format",
            "type": "string",
            "example": "2024-10-21T19:24:54.504Z"
          },
          "priority": {
            "description": "Task's priority",
            "type": "string",
            "enum": ["without priority", "low", "medium", "high"]
          },
          "columnId": {
            "description": "Task's column id",
            "type": "string",
            "example": "67253fb87c2bb8a903b38e0b"
          }
        }
      }
    }
  }
}
